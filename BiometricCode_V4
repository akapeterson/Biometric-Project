import time 
import hashlib
from pyfingerprint.pyfingerprint import PyFingerprint
import Adafruit_CharLCD as LCD
import RPi.GPIO as GPIO

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

buzzer = 19

GPIO.setup(buzzer, GPIO.OUT)#buzzer
GPIO.setup(20,GPIO.OUT)#Green
GPIO.setup(21,GPIO.OUT)#Red
GPIO.setup(16,GPIO.OUT)#Blue

lcd_rs = 25
lcd_en = 24
lcd_d4 = 23
lcd_d5 = 17
lcd_d6 = 18
lcd_d7 = 22
lcd_backlight = 2

# Define LCD column and row size for 16x2 LCD.
lcd_columns = 16
lcd_rows = 2
lcd = LCD.Adafruit_CharLCD(lcd_rs, lcd_en, lcd_d4, lcd_d5, lcd_d6, lcd_d7, lcd_columns, lcd_rows, lcd_backlight)
## Search for a finger
##
## Tries to initialize the sensor
try:
    f = PyFingerprint('/dev/ttyUSB0', 57600, 0xFFFFFFFF, 0x00000000)

    if ( f.verifyPassword() == False ):
        raise ValueError('The given fingerprint sensor password is wrong!')

except Exception as e:
    print('The fingerprint sensor could not be initialized!')
    print('Exception message: ' + str(e))
    exit(1)

## Gets some sensor information
print('Currently used templates: ' + str(f.getTemplateCount()) +'/'+ str(f.getStorageCapacity()))

## Tries to search the finger and calculate hash
def searchFinger():
    try:
        for i in range (3, 0, -1):
            lcd.clear()
            lcd.message('''Waiting for
Finger Placement''')
            GPIO.output(16, GPIO.HIGH)
            
            while ( f.readImage() == False ):
                pass
            ## Wait that finger is read        
            ## Converts read image to characteristics and stores it in charbuffer 1
            f.convertImage(0x01)

            ## Searchs template
            result = f.searchTemplate()
            positionNumber = result[0]
            accuracyScore = result[1]
            
            attempt = positionNumber
            
            if (attempt == -1):
                lcd.clear()
                lcd.message('''No Fingerprint
match found!''')
                GPIO.output(16, GPIO.LOW)
                GPIO.output(21, GPIO.HIGH)#Red
                time.sleep(2.0)
                lcd.clear()
                lcd.message('''Access Denied!
Try Again!''')
                for alarm in range(10):
                    time.sleep(0.1)
                    GPIO.output(21, GPIO.HIGH)##Red
                    time.sleep(0.1)
                    GPIO.output(21, GPIO.LOW)
                lcd.clear()
            else:
                lcd.clear()
                lcd.message('''System Unlocked!
Access Granded''')
                GPIO.output(16, GPIO.LOW)
                GPIO.output(20, GPIO.HIGH)#green
                GPIO.output(buzzer, GPIO.HIGH)
                time.sleep(0.1)
                GPIO.output(20, GPIO.LOW)
                GPIO.output(buzzer, GPIO.LOW)
                time.sleep(0.1)
                GPIO.output(20, GPIO.HIGH)#green
                GPIO.output(buzzer, GPIO.HIGH)
                time.sleep(0.1)
                GPIO.output(20, GPIO.LOW)
                GPIO.output(buzzer, GPIO.LOW)
                time.sleep(0.1)
                
                for alarm in range(3):
                    GPIO.output(20, GPIO.HIGH)#green
                    time.sleep(0.1)
                    GPIO.output(20, GPIO.LOW)
                    time.sleep(0.1)
                    GPIO.output(20, GPIO.HIGH)#green
                    time.sleep(0.1)
                    GPIO.output(20, GPIO.LOW)
                    
                GPIO.output(20, GPIO.HIGH)#green
                time.sleep(3.0)
                GPIO.output(20, GPIO.LOW)
                    
                Begin()
                searchFinger()
                
        if (i == 1):
            lcd.clear()
            GPIO.output(16, GPIO.LOW)
            GPIO.output(21, GPIO.HIGH)#Red
            lcd.message("Attempts Exhaused")
            time.sleep(2.0)
            lcd.clear()
            lcd.message("Alarm Activated")
### Alarm ### Alarm ### Alarm ### Alarm ### Alarm ### Alarm ###
            for alarm in range(25):                         ###
                GPIO.output(buzzer, GPIO.HIGH)              ###
                GPIO.output(21, GPIO.HIGH)#Red              ###
                time.sleep(0.1)                             ###
                GPIO.output(buzzer, GPIO.LOW)               ###
                GPIO.output(21, GPIO.LOW)#Red               ###
                time.sleep(0.1)                             ###
                                                            ###
                GPIO.output(buzzer, GPIO.HIGH)              ###
                GPIO.output(16, GPIO.HIGH)#Red              ###
                time.sleep(0.1)                             ###
                GPIO.output(buzzer, GPIO.LOW)               ###
                GPIO.output(16, GPIO.LOW)#Red               ###
                time.sleep(0.1)                             ###
###############################################################
            lcd.clear()
        else:
            searchFinger()
        ## OPTIONAL stuff
        ##
        ## Loads the found template to charbuffer 1
        f.loadTemplate(positionNumber, 0x01)

        ## Downloads the characteristics of template loaded in charbuffer 1
        characterics = str(f.downloadCharacteristics(0x01)).encode('utf-8')

    except Exception as e:
        print('Operation failed!')
        print('Exception message: ' + str(e))
        Begin()
        searchFinger()
        exit(1)
        
def Begin():
    GPIO.output(16, GPIO.HIGH)
    lcd.clear()
    lcd.message('System Locked!')
    time.sleep(0.5)
    lcd.clear()
    time.sleep(0.5)
    lcd.message('System Locked!')
    time.sleep(0.5)
    lcd.clear()
    time.sleep(0.5)
    lcd.message('System Locked!')
    time.sleep(0.5)
    lcd.clear()
    
while True:
    Begin()    
    searchFinger()
